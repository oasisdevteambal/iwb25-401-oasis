The tax calculation application (only for Sri Lanka) is designed as a complete web solution that allows administrators to manage government tax documentation and enables end users to easily determine their tax liabilities. The system is structured around a modern frontend built with Next.js and a robust backend implemented in Ballerina, harnessing the power of large language models to extract meaningful tax rules from uploaded documents.

When an administrator uploads a document, whether in PDF or Word format, the application immediately stores the file in a secure blob storage service. Behind the scenes, Ballerina orchestrates the processing pipeline: it begins by parsing the document text, then segments the content into manageable portions before sending them to an LLM for extraction. The language model analyzes the text to identify tax brackets, deduction limits, and special rules, returning structured data that describe each element in detail. These structured rules are then persisted in a relational database for precise calculations, while corresponding semantic embeddings are stored in a vector database to support fast, context‑aware retrieval.

The key technologies powering this application span modern web and data platforms. For the frontend, Next.js paired with React delivers a responsive and interactive user interface. On the server side, Ballerina handles API orchestration, file parsing, and business logic. Raw documents are stored in a scalable blob service such as AWS S3 or Azure Blob Storage, while structured tax rules reside in PostgreSQL. Semantic embeddings leverage OpenAI’s embeddings API (or an open-source alternative) and are indexed in a vector database like Pinecone or Weaviate for context‑aware retrieval. To render dynamic forms, the system uses React JSON Schema Form, converting generated JSON Schemas into validated input components. Underlying it all, RESTful endpoints expose upload, processing, schema retrieval, and tax calculation functions to keep each layer decoupled and scalable.

From the user’s perspective, interaction occurs through a friendly chat interface or dynamic forms that adapt automatically to the latest documentation context. Every time new or updated tax regulations are uploaded, the same processing pipeline generates an updated schema outlining the required input fields, validation constraints, and any conditional dependencies. This schema is stored alongside the rule definitions and is retrieved by the frontend to render interactive forms. As a result, the moment tax rules change, the questions and fields presented to the user evolve accordingly, ensuring that data collection always reflects the current regulations without manual form redesign.

When a user completes the form or engages in a chat session, their answers—covering income sources, deductions, and other personal financial details—are sent back to the backend. Ballerina uses the stored tax rule definitions to compute the user’s total tax liability accurately, applying bracket calculations, deduction formulas, and any special case adjustments. The result is delivered instantly, with an explanation derived from the underlying rules so users understand how their tax amount was determined.

To support this functionality, the application exposes several RESTful endpoints: one for document uploads, another to trigger processing, an endpoint for retrieving the latest form schema, and a dedicated route for calculating tax based on user input. The modular architecture ensures each component can be scaled independently. The choice of PostgreSQL for structured rule storage, a vector store for semantic lookups, and S3‑style blob storage for raw documents combines proven technologies into a seamless workflow.

Overall, this design empowers administrators to maintain up‑to‑date tax regulations effortlessly, and it provides end users with a guided, dynamically generated interface that simplifies the complex task of tax calculation. As new government guidelines emerge, the system adapts on the fly, keeping both documentation and user experience aligned with the latest requirements.


1. What specific types of tax regulations in Sri Lanka (e.g., income tax, VAT, PAYE) should the system prioritize when extracting rules and generating dynamic forms? all of them
2. How should the system handle versioning and updates of tax rules—should it maintain historical rule sets for past tax periods, or only reflect the most current regulations? mostly focus on the latest version. (if there is a method to understand how it was in past, and compare new tax and the past tax and method to compare the difference, it would be nice)
3. Are there any existing Sri Lankan government tax forms or official document templates that should be used as reference for structuring the JSON Schemas and form layouts? actually i don't know about that. can you do the research on that aswell. 



notes: 

* since this is a critical application that relates to tax and regulations, the information should be precise. when extracting data from the documents and when they save in database, we need save actual and precise data in the database. we should not use fallback methods in the process of document extraction, if there are any errors occurs when extracting data and process them and do not save likely information (something like we do not really know. but we assume that is that. and save it. we must not do that. if we don't know. we don't know and tell the user about the problem.)